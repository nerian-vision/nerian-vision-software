#include "misc/xmlfiles.h"

// THIS CODE IS AUTO GENERATED! DO NOT CHANGE!

namespace GenTL {

std::map<std::string, XmlFiles::FileData> XmlFiles::xmlFiles =  {

{"datastream.xml", FileData(24, 155, 48893, std::string("")
  + std::string("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n")
  + std::string("<RegisterDescription\n")
  + std::string("    ModelName=\"NerianGentTLDataStream\"\n")
  + std::string("    VendorName=\"Allied_Vision_Technologies_GmbH\"\n")
  + std::string("    ToolTip=\"TL Data Stream\"\n")
  + std::string("    StandardNameSpace=\"None\"\n")
  + std::string("    SchemaMajorVersion=\"1\"\n")
  + std::string("    SchemaMinorVersion=\"1\"\n")
  + std::string("    SchemaSubMinorVersion=\"0\"\n")
  + std::string("    MajorVersion=\"24\"\n")
  + std::string("    MinorVersion=\"155\"\n")
  + std::string("    SubMinorVersion=\"48893\"\n")
  + std::string("    ProductGuid=\"7042183a-8006-48b3-9dc4-c1129a5c74ab\"\n")
  + std::string("    VersionGuid=\"282a4e92-e184-b987-bd8e-cb55160348cf\"\n")
  + std::string("    xmlns=\"http://www.genicam.org/GenApi/Version_1_1\"\n")
  + std::string("    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n")
  + std::string("    xsi:schemaLocation=\"http://www.genicam.org/GenApi/Version_1_1 http://www.genicam.org/GenApi/GenApiSchema_Version_1_1.xsd\">\n")
  + std::string("\n")
  + std::string("    <!-- Categories -->\n")
  + std::string("\n")
  + std::string("    <Category Name=\"Root\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>StreamInformation</pFeature>\n")
  + std::string("        <pFeature>BufferHandlingControl</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"StreamInformation\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>StreamID</pFeature>\n")
  + std::string("        <pFeature>StreamType</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"BufferHandlingControl\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>StreamAnnouncedBufferCount</pFeature>\n")
  + std::string("        <pFeature>StreamBufferHandlingMode</pFeature>\n")
  + std::string("        <pFeature>StreamAnnounceBufferMinimum</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <!-- Stream information -->\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"StreamID\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xE0000000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>StreamPort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"StreamType\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Ethernet\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <!-- Buffer handling control -->\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"StreamAnnouncedBufferCount\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>StreamAnnouncedBufferCountReg</pValue>\n")
  + std::string("        <pMin>StreamAnnouncedBufferCountReg</pMin>\n")
  + std::string("        <pMax>StreamAnnouncedBufferCountReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"StreamAnnouncedBufferCountReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xE0003000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>StreamPort</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"StreamBufferHandlingMode\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"OldestFirst\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"StreamAnnounceBufferMinimum\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>StreamAnnounceBufferMinimumReg</pValue>\n")
  + std::string("        <pMin>StreamAnnounceBufferMinimumReg</pMin>\n")
  + std::string("        <pMax>StreamAnnounceBufferMinimumReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"StreamAnnounceBufferMinimumReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xE000C000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>StreamPort</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Port Name=\"StreamPort\" NameSpace=\"Standard\">\n")
  + std::string("    </Port>\n")
  + std::string("</RegisterDescription>\n")
  + std::string("\n")
)},


{"device.xml", FileData(24, 155, 48893, std::string("")
  + std::string("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n")
  + std::string("<RegisterDescription\n")
  + std::string("    ModelName=\"NerianGentTLDevice\"\n")
  + std::string("    VendorName=\"Allied_Vision_Technologies_GmbH\"\n")
  + std::string("    ToolTip=\"TL Interface\"\n")
  + std::string("    StandardNameSpace=\"None\"\n")
  + std::string("    SchemaMajorVersion=\"1\"\n")
  + std::string("    SchemaMinorVersion=\"1\"\n")
  + std::string("    SchemaSubMinorVersion=\"0\"\n")
  + std::string("    MajorVersion=\"24\"\n")
  + std::string("    MinorVersion=\"155\"\n")
  + std::string("    SubMinorVersion=\"48893\"\n")
  + std::string("    ProductGuid=\"8b6582b0-b379-4a38-86aa-a76d91930382\"\n")
  + std::string("    VersionGuid=\"46c61507-de45-7176-96fd-70597426d6aa\"\n")
  + std::string("    xmlns=\"http://www.genicam.org/GenApi/Version_1_1\"\n")
  + std::string("    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n")
  + std::string("    xsi:schemaLocation=\"http://www.genicam.org/GenApi/Version_1_1 http://www.genicam.org/GenApi/GenApiSchema_Version_1_1.xsd\">\n")
  + std::string("\n")
  + std::string("    <!-- Categories -->\n")
  + std::string("\n")
  + std::string("    <Category Name=\"Root\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>DeviceInformation</pFeature>\n")
  + std::string("        <pFeature>StreamEnumeration</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"DeviceInformation\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>DeviceID</pFeature>\n")
  + std::string("        <pFeature>DeviceVendorName</pFeature>\n")
  + std::string("        <pFeature>DeviceModelName</pFeature>\n")
  + std::string("        <pFeature>DeviceType</pFeature>\n")
  + std::string("        <pFeature>DeviceAccessStatus</pFeature>\n")
  + std::string("        <!--pFeature>DeviceSerialNumber</pFeature-->\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"StreamEnumeration\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>StreamSelector</pFeature>\n")
  + std::string("        <pFeature>StreamID</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <!-- Device information -->\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceID\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xE0000000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>DevicePort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceVendorName\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xE0001000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>DevicePort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceModelName\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xE0002000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>DevicePort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"DeviceType\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Ethernet\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"DeviceAccessStatus\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <EnumEntry Name=\"ReadWrite\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Busy\">\n")
  + std::string("            <Value>4</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>DeviceAccessStatusReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <IntReg Name=\"DeviceAccessStatusReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xE0005000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>DevicePort</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Stream enumeration (not active)-->\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"StreamSelector\" NameSpace=\"Standard\">\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>0</Max>\n")
  + std::string("        <pSelected>StreamID</pSelected>\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <String Name=\"StreamID\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <Value>default</Value>\n")
  + std::string("    </String>\n")
  + std::string("\n")
  + std::string("    <!--StringReg Name=\"DeviceSerialNumber\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xE0007000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>DevicePort</pPort>\n")
  + std::string("    </StringReg-->\n")
  + std::string("\n")
  + std::string("    <Port Name=\"DevicePort\" NameSpace=\"Standard\">\n")
  + std::string("    </Port>\n")
  + std::string("</RegisterDescription>\n")
  + std::string("\n")
)},


{"interface.xml", FileData(24, 155, 48893, std::string("")
  + std::string("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n")
  + std::string("<RegisterDescription\n")
  + std::string("    ModelName=\"NerianGentTLInterface\"\n")
  + std::string("    VendorName=\"Allied_Vision_Technologies_GmbH\"\n")
  + std::string("    ToolTip=\"TL Interface\"\n")
  + std::string("    StandardNameSpace=\"None\"\n")
  + std::string("    SchemaMajorVersion=\"1\"\n")
  + std::string("    SchemaMinorVersion=\"1\"\n")
  + std::string("    SchemaSubMinorVersion=\"0\"\n")
  + std::string("    MajorVersion=\"24\"\n")
  + std::string("    MinorVersion=\"155\"\n")
  + std::string("    SubMinorVersion=\"48893\"\n")
  + std::string("    ProductGuid=\"87b91f8e-906c-4077-b77f-d134107956de\"\n")
  + std::string("    VersionGuid=\"5c280d10-e576-5e2d-e9a2-a04df93ee87d\"\n")
  + std::string("    xmlns=\"http://www.genicam.org/GenApi/Version_1_1\"\n")
  + std::string("    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n")
  + std::string("    xsi:schemaLocation=\"http://www.genicam.org/GenApi/Version_1_1 http://www.genicam.org/GenApi/GenApiSchema_Version_1_1.xsd\">\n")
  + std::string("\n")
  + std::string("    <!-- Categories -->\n")
  + std::string("\n")
  + std::string("    <Category Name=\"Root\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>InterfaceInformation</pFeature>\n")
  + std::string("        <pFeature>DeviceEnumeration</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"InterfaceInformation\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>InterfaceID</pFeature>\n")
  + std::string("        <pFeature>InterfaceType</pFeature>\n")
  + std::string("        <pFeature>InterfaceTLVersionMajor</pFeature>\n")
  + std::string("        <pFeature>InterfaceTLVersionMinor</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"DeviceEnumeration\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>DeviceUpdateList</pFeature>\n")
  + std::string("        <pFeature>DeviceSelector</pFeature>\n")
  + std::string("        <pFeature>DeviceID</pFeature>\n")
  + std::string("        <pFeature>DeviceVendorName</pFeature>\n")
  + std::string("        <pFeature>DeviceModelName</pFeature>\n")
  + std::string("        <pFeature>DeviceAccessStatus</pFeature>\n")
  + std::string("        <!--pFeature>DeviceSerialNumber</pFeature-->\n")
  + std::string("        <pFeature>DeviceTLVersionMajor</pFeature>\n")
  + std::string("        <pFeature>DeviceTLVersionMinor</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <!-- Interface information -->\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"InterfaceID\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xE0000000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>InterfacePort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"InterfaceType\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Ethernet\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"InterfaceTLVersionMajor\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <Value>1</Value>\n")
  + std::string("        <Min>1</Min>\n")
  + std::string("        <Max>1</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"InterfaceTLVersionMinor\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <Value>5</Value>\n")
  + std::string("        <Min>5</Min>\n")
  + std::string("        <Max>5</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <!-- Device enumeration -->\n")
  + std::string("\n")
  + std::string("    <Command Name=\"DeviceUpdateList\" NameSpace=\"Standard\">\n")
  + std::string("        <!-- This command has no effect -->\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>WO</ImposedAccessMode>\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("        <CommandValue>0</CommandValue>\n")
  + std::string("    </Command>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"DeviceSelector\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>DeviceSelectorReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <pMax>DeviceSelectorMaxReg</pMax>\n")
  + std::string("\n")
  + std::string("        <pSelected>DeviceID</pSelected>\n")
  + std::string("        <pSelected>DeviceVendorName</pSelected>\n")
  + std::string("        <pSelected>DeviceModelName</pSelected>\n")
  + std::string("        <pSelected>DeviceAccessStatus</pSelected>\n")
  + std::string("        <pSelected>DeviceTLVersionMajor</pSelected>\n")
  + std::string("        <pSelected>DeviceTLVersionMinor</pSelected>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"DeviceSelectorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xD0000000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>InterfacePort</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"DeviceSelectorMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xE03E8000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>InterfacePort</pPort>\n")
  + std::string("        <Sign>Signed</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceID\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xC0000000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>InterfacePort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceVendorName\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xC0001000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>InterfacePort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceModelName\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xC0002000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>InterfacePort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"DeviceAccessStatus\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <EnumEntry Name=\"ReadWrite\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Busy\">\n")
  + std::string("            <Value>4</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>DeviceAccessStatusReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <IntReg Name=\"DeviceAccessStatusReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0005000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>InterfacePort</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"DeviceTLVersionMajor\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <Value>1</Value>\n")
  + std::string("        <Min>1</Min>\n")
  + std::string("        <Max>1</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"DeviceTLVersionMinor\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <Value>5</Value>\n")
  + std::string("        <Min>5</Min>\n")
  + std::string("        <Max>5</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <!--StringReg Name=\"DeviceSerialNumber\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xC0007000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>InterfacePort</pPort>\n")
  + std::string("    </StringReg-->\n")
  + std::string("\n")
  + std::string("    <Port Name=\"InterfacePort\" NameSpace=\"Standard\">\n")
  + std::string("    </Port>\n")
  + std::string("</RegisterDescription>\n")
  + std::string("\n")
)},


{"remote.xml", FileData(24, 171, 39069, std::string("")
  + std::string("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n")
  + std::string("<RegisterDescription\n")
  + std::string("    ModelName=\"SceneScan_SceneScanPro_Scarlet\"\n")
  + std::string("    VendorName=\"Allied_Vision_Technologies_GmbH\"\n")
  + std::string("    ToolTip=\"SceneScan_SceneScanPro_Scarlet\"\n")
  + std::string("    StandardNameSpace=\"None\"\n")
  + std::string("    SchemaMajorVersion=\"1\"\n")
  + std::string("    SchemaMinorVersion=\"1\"\n")
  + std::string("    SchemaSubMinorVersion=\"0\"\n")
  + std::string("    MajorVersion=\"24\"\n")
  + std::string("    MinorVersion=\"171\"\n")
  + std::string("    SubMinorVersion=\"39069\"\n")
  + std::string("    ProductGuid=\"ac1c6f72-b410-41b7-82e6-fa049db075a4\"\n")
  + std::string("    VersionGuid=\"6a8a5f27-02ef-62ba-c746-90e4d624d3e8\"\n")
  + std::string("    xmlns=\"http://www.genicam.org/GenApi/Version_1_1\"\n")
  + std::string("    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n")
  + std::string("    xsi:schemaLocation=\"http://www.genicam.org/GenApi/Version_1_1 http://www.genicam.org/GenApi/GenApiSchema_Version_1_1.xsd\">\n")
  + std::string("\n")
  + std::string("    <!-- Categories -->\n")
  + std::string("\n")
  + std::string("    <Category Name=\"Root\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>DeviceControl</pFeature>\n")
  + std::string("        <pFeature>AcquisitionControl</pFeature>\n")
  + std::string("        <pFeature>AnalogControl</pFeature>\n")
  + std::string("        <pFeature>ImageFormatControl</pFeature>\n")
  + std::string("        <pFeature>TransportLayerControl</pFeature>\n")
  + std::string("        <pFeature>Scan3dControl</pFeature>\n")
  + std::string("        <pFeature>DigitalIOControl</pFeature>\n")
  + std::string("        <pFeature>Nerian</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"DeviceControl\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>DeviceVendorName</pFeature>\n")
  + std::string("        <pFeature>DeviceModelName</pFeature>\n")
  + std::string("        <pFeature>DeviceManufacturerInfo</pFeature>\n")
  + std::string("        <pFeature>DeviceID</pFeature>\n")
  + std::string("        <pFeature>DeviceSerialNumber</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"AcquisitionControl\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>AcquisitionMode</pFeature>\n")
  + std::string("        <pFeature>AcquisitionStart</pFeature>\n")
  + std::string("        <pFeature>AcquisitionStop</pFeature>\n")
  + std::string("        <pFeature>AcquisitionFrameRate</pFeature>\n")
  + std::string("        <pFeature>AcquisitionFrameRateEnable</pFeature>\n")
  + std::string("        <pFeature>TriggerSelector</pFeature>\n")
  + std::string("        <pFeature>TriggerMode</pFeature>\n")
  + std::string("        <pFeature>TriggerSource</pFeature>\n")
  + std::string("        <pFeature>TriggerSoftware</pFeature>\n")
  + std::string("        <pFeature>ExposureMode</pFeature>\n")
  + std::string("        <!--pFeature>ExposureTimeMode</pFeature-->\n")
  + std::string("        <pFeature>ExposureTimeSelector</pFeature>\n")
  + std::string("        <pFeature>ExposureTime</pFeature>\n")
  + std::string("        <pFeature>ExposureAuto</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"AnalogControl\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>GainSelector</pFeature>\n")
  + std::string("        <pFeature>Gain</pFeature>\n")
  + std::string("        <pFeature>GainAuto</pFeature>\n")
  + std::string("        <pFeature>BalanceRatioSelector</pFeature>\n")
  + std::string("        <pFeature>BalanceRatio</pFeature>\n")
  + std::string("        <pFeature>BalanceWhiteAuto</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"ImageFormatControl\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>SensorHeight</pFeature>\n")
  + std::string("        <pFeature>SensorWidth</pFeature>\n")
  + std::string("        <pFeature>OffsetX</pFeature>\n")
  + std::string("        <pFeature>OffsetY</pFeature>\n")
  + std::string("        <pFeature>Width</pFeature>\n")
  + std::string("        <pFeature>Height</pFeature>\n")
  + std::string("        <pFeature>BinningHorizontal</pFeature>\n")
  + std::string("        <pFeature>BinningVertical</pFeature>\n")
  + std::string("        <pFeature>PixelFormat</pFeature>\n")
  + std::string("        <pFeature>ComponentSelector</pFeature>\n")
  + std::string("        <pFeature>ComponentEnable</pFeature>\n")
  + std::string("        <pFeature>ComponentIDValue</pFeature>\n")
  + std::string("        <pFeature>IntensitySource</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"TransportLayerControl\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>PayloadSize</pFeature>\n")
  + std::string("        <pFeature>TLParamsLocked</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"Scan3dControl\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>Scan3dFocalLength</pFeature>\n")
  + std::string("        <pFeature>Scan3dBaseline</pFeature>\n")
  + std::string("        <pFeature>Scan3dInvalidDataFlag</pFeature>\n")
  + std::string("        <pFeature>Scan3dInvalidDataValue</pFeature>\n")
  + std::string("        <pFeature>Scan3dPrincipalPointU</pFeature>\n")
  + std::string("        <pFeature>Scan3dPrincipalPointV</pFeature>\n")
  + std::string("        <pFeature>Scan3dOutputMode</pFeature>\n")
  + std::string("        <pFeature>Scan3dCoordinateScale</pFeature>\n")
  + std::string("        <pFeature>Scan3dCoordinateOffset</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"DigitalIOControl\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>LineSelector</pFeature>\n")
  + std::string("        <pFeature>LineMode</pFeature>\n")
  + std::string("        <pFeature>LineInverter</pFeature>\n")
  + std::string("        <pFeature>LineSource</pFeature>\n")
  + std::string("        <pFeature>UserOutputSelector</pFeature>\n")
  + std::string("        <pFeature>UserOutputValue</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"Nerian\" NameSpace=\"Custom\">\n")
  + std::string("        <pFeature>LinePulseWidthSelector</pFeature>\n")
  + std::string("        <pFeature>LinePulseWidthAlternationMode</pFeature>\n")
  + std::string("        <pFeature>LinePulseWidth</pFeature>\n")
  + std::string("        <pFeature>InputPixelFormat</pFeature>\n")
  + std::string("        <pFeature>PatternProjectorPresent</pFeature>\n")
  + std::string("        <pFeature>PatternProjectorBrightness</pFeature>\n")
  + std::string("        <pFeature>QMatrixIndex</pFeature>\n")
  + std::string("        <pFeature>QMatrixData</pFeature>\n")
  + std::string("        <pFeature>NumberOfDisparities</pFeature>\n")
  + std::string("        <pFeature>DisparityOffset</pFeature>\n")
  + std::string("        <pFeature>SgmP1NoEdge</pFeature>\n")
  + std::string("        <pFeature>SgmP1Edge</pFeature>\n")
  + std::string("        <pFeature>SgmP2NoEdge</pFeature>\n")
  + std::string("        <pFeature>SgmP2Edge</pFeature>\n")
  + std::string("        <pFeature>SgmEdgeSensitivity</pFeature>\n")
  + std::string("        <pFeature>SubpixelOptimizationROIEnabled</pFeature>\n")
  + std::string("        <pFeature>SubpixelOptimizationROIWidth</pFeature>\n")
  + std::string("        <pFeature>SubpixelOptimizationROIHeight</pFeature>\n")
  + std::string("        <pFeature>SubpixelOptimizationROIOffsetX</pFeature>\n")
  + std::string("        <pFeature>SubpixelOptimizationROIOffsetY</pFeature>\n")
  + std::string("        <pFeature>MaskBorderPixelsEnabled</pFeature>\n")
  + std::string("        <pFeature>ConsistencyCheckEnabled</pFeature>\n")
  + std::string("        <pFeature>ConsistencyCheckSensitivity</pFeature>\n")
  + std::string("        <pFeature>UniquenessCheckEnabled</pFeature>\n")
  + std::string("        <pFeature>UniquenessCheckSensitivity</pFeature>\n")
  + std::string("        <pFeature>TextureFilterEnabled</pFeature>\n")
  + std::string("        <pFeature>TextureFilterSensitivity</pFeature>\n")
  + std::string("        <pFeature>GapInterpolationEnabled</pFeature>\n")
  + std::string("        <pFeature>NoiseReductionEnabled</pFeature>\n")
  + std::string("        <pFeature>SpeckleFilterIterations</pFeature>\n")
  + std::string("        <pFeature>FlushOutputQueue</pFeature> <!-- DEBUG -->\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Port Name=\"Device\" NameSpace=\"Standard\">\n")
  + std::string("    </Port>\n")
  + std::string("\n")
  + std::string("    <!-- Device control -->\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceVendorName\" NameSpace=\"Standard\">\n")
  + std::string("        <Address>0xE0001000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceModelName\" NameSpace=\"Standard\">\n")
  + std::string("        <Address>0xE0002000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceManufacturerInfo\" NameSpace=\"Standard\">\n")
  + std::string("        <Address>0xE0001000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceID\" NameSpace=\"Standard\">\n")
  + std::string("        <Address>0xE0000000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"DeviceSerialNumber\" NameSpace=\"Standard\">\n")
  + std::string("        <Address>0xE0007000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <IntReg Name=\"DeviceFeatureReg\" NameSpace=\"Custom\">\n")
  + std::string("        <!-- Nerian device feature bit map. Used to mask/unmask features with pIsAvailable and IntSwissKnife -->\n")
  + std::string("        <!-- Child feature address index 0xff -->\n")
  + std::string("        <Address>0xC00FF000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Acquisition control -->\n")
  + std::string("\n")
  + std::string("    <Command Name=\"AcquisitionStart\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>WO</ImposedAccessMode>\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("        <CommandValue>0</CommandValue>\n")
  + std::string("    </Command>\n")
  + std::string("\n")
  + std::string("    <Command Name=\"AcquisitionStop\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>WO</ImposedAccessMode>\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("        <CommandValue>0</CommandValue>\n")
  + std::string("    </Command>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"AcquisitionMode\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Continuous\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <Value>1</Value>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <Float Name=\"AcquisitionFrameRate\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>The trigger frequency for the primary internal camera trigger generator (Line0), which is also the frequency for an enabled trigger output (Line1). Only used when TriggerSource is set to Line0.</ToolTip>\n")
  + std::string("        <Description>The trigger frequency for the primary internal camera trigger generator (Line0), which is also the frequency for an enabled trigger output (Line1). Only used when TriggerSource is set to Line0.</Description>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>AcquisitionFrameRateReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <pMax>AcquisitionFrameRateMaxReg</pMax>\n")
  + std::string("    </Float>\n")
  + std::string("    <FloatReg Name=\"AcquisitionFrameRateReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC002B000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("    <FloatReg Name=\"AcquisitionFrameRateMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC002C000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"AcquisitionFrameRateEnable\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <Value>1</Value>\n")
  + std::string("    </Boolean>\n")
  + std::string("\n")
  + std::string("    <!-- Trigger control (inside category Acquisition) -->\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"TriggerSelector\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"FrameStart\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <Value>1</Value>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"TriggerMode\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"On\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <Value>1</Value>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <IntSwissKnife Name=\"HardwareTriggerInputPresent\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">DeviceFeatureReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 4</Formula> <!-- Bit 2: availability of hardware trigger input -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <Enumeration Name=\"TriggerSource\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Trigger source, selected between internal trigger generator (Line0) or available external triggering modes</ToolTip>\n")
  + std::string("        <Description>Trigger source, selected between internal trigger generator (Line0) or available external triggering modes</Description>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Line0\" NameSpace=\"Standard\">\n")
  + std::string("            <ToolTip>Line0 represents the internal trigger generator</ToolTip>\n")
  + std::string("            <Description>Line0 represents the internal trigger generator</Description>\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Line1\" NameSpace=\"Standard\">\n")
  + std::string("            <ToolTip>Line1 represents the external trigger line (if set to Input mode)</ToolTip>\n")
  + std::string("            <Description>Line1 represents the external trigger line (if set to Input mode)</Description>\n")
  + std::string("            <pIsAvailable>HardwareTriggerInputPresent</pIsAvailable>\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Software\" NameSpace=\"Standard\">\n")
  + std::string("            <ToolTip>Software triggering via TCP, use TriggerSoftware command to emit</ToolTip>\n")
  + std::string("            <Description>Software triggering via TCP, use TriggerSoftware command to emit</Description>\n")
  + std::string("            <Value>2</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>TriggerSourceReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"TriggerSourceReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC002E000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Command Name=\"TriggerSoftware\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>WO</ImposedAccessMode>\n")
  + std::string("        <pValue>TriggerSoftwareBool</pValue>\n")
  + std::string("        <CommandValue>1</CommandValue>\n")
  + std::string("    </Command>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"TriggerSoftwareBool\" NameSpace=\"Custom\">\n")
  + std::string("        <ImposedAccessMode>WO</ImposedAccessMode>\n")
  + std::string("        <pValue>TriggerSoftwareReg</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("\n")
  + std::string("    <IntReg Name=\"TriggerSoftwareReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC001E000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>WO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Exposure control (inside category Acquisition) -->\n")
  + std::string("    <Enumeration Name=\"ExposureTimeSelector\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Selector for exposure time. Left and right camera are always tied, but on three-sensor models, the settings for the center (color) camera can be set independently.</ToolTip>\n")
  + std::string("        <Description>Selector for exposure time. Left and right camera are always tied, but on three-sensor models, the settings for the center (color) camera can be set independently.</Description>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"StereoCamera\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"ColorCamera\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>ThirdCameraPresent</pIsAvailable>\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>ExposureTimeSelectorReg</pValue>\n")
  + std::string("        <pSelected>ExposureTime</pSelected>\n")
  + std::string("        <pSelected>ExposureTimeReg</pSelected>\n")
  + std::string("        <pSelected>ExposureTimeMinReg</pSelected>\n")
  + std::string("        <pSelected>ExposureTimeMaxReg</pSelected>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"ExposureTimeSelectorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0019000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"ExposureMode\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Timed\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <Value>1</Value>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <Float Name=\"ExposureTime\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>ExposureTimeReg</pValue>\n")
  + std::string("        <pMin>ExposureTimeMinReg</pMin>\n")
  + std::string("        <pMax>ExposureTimeMaxReg</pMax>\n")
  + std::string("    </Float>\n")
  + std::string("    <FloatReg Name=\"ExposureTimeReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC000B000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("    <FloatReg Name=\"ExposureTimeMinReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC000C000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("    <FloatReg Name=\"ExposureTimeMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC000D000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("    <Enumeration Name=\"ExposureAuto\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Off\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Continuous\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>2</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>ExposureAutoReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"ExposureAutoReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC000E000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Gain control (inside category Analog) -->\n")
  + std::string("    <Enumeration Name=\"GainSelector\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Selector for gain. Left and right camera are always tied, but on three-sensor models, the settings for the center (color) camera can be set independently.</ToolTip>\n")
  + std::string("        <Description>Selector for gain. Left and right camera are always tied, but on three-sensor models, the settings for the center (color) camera can be set independently.</Description>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"StereoCamera\" NameSpace=\"Custom\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"ColorCamera\" NameSpace=\"Custom\">\n")
  + std::string("            <pIsAvailable>ThirdCameraPresent</pIsAvailable>\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>GainSelectorReg</pValue>\n")
  + std::string("        <pSelected>Gain</pSelected>\n")
  + std::string("        <pSelected>GainReg</pSelected>\n")
  + std::string("        <pSelected>GainMinReg</pSelected>\n")
  + std::string("        <pSelected>GainMaxReg</pSelected>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"GainSelectorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC001A000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Float Name=\"Gain\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>GainReg</pValue>\n")
  + std::string("        <pMin>GainMinReg</pMin>\n")
  + std::string("        <pMax>GainMaxReg</pMax>\n")
  + std::string("    </Float>\n")
  + std::string("    <FloatReg Name=\"GainReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC000F000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("    <FloatReg Name=\"GainMinReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0010000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("    <FloatReg Name=\"GainMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0011000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("    <Enumeration Name=\"GainAuto\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Off\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Continuous\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>2</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>GainAutoReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"GainAutoReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0012000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- White balance control (inside category Analog) -->\n")
  + std::string("\n")
  + std::string("    <IntSwissKnife Name=\"BalanceControlAvailable\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">DeviceFeatureReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 2</Formula> <!-- Bit 1: availability of balance control -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <Enumeration Name=\"BalanceRatioSelector\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Selector for color channel to white balance; Red or Blue (Green is reference).</ToolTip>\n")
  + std::string("        <Description>Selector for color channel to white balance; Red or Blue (Green is reference).</Description>\n")
  + std::string("        <pIsAvailable>BalanceControlAvailable</pIsAvailable>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Red\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Blue\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>3</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>BalanceRatioSelectorReg</pValue>\n")
  + std::string("        <pSelected>BalanceRatio</pSelected>\n")
  + std::string("        <pSelected>BalanceRatioReg</pSelected>\n")
  + std::string("        <pSelected>BalanceRatioMinReg</pSelected>\n")
  + std::string("        <pSelected>BalanceRatioMaxReg</pSelected>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"BalanceRatioSelectorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <pIsAvailable>BalanceControlAvailable</pIsAvailable>\n")
  + std::string("        <Address>0xC0013000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <Float Name=\"BalanceRatio\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>White balance factor, relative to a constant Green of 1.0.</ToolTip>\n")
  + std::string("        <Description>White balance factor, relative to a constant Green of 1.0.</Description>\n")
  + std::string("        <pIsAvailable>BalanceControlAvailable</pIsAvailable>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>BalanceRatioReg</pValue>\n")
  + std::string("        <pMin>BalanceRatioMinReg</pMin>\n")
  + std::string("        <pMax>BalanceRatioMaxReg</pMax>\n")
  + std::string("    </Float>\n")
  + std::string("    <FloatReg Name=\"BalanceRatioReg\" NameSpace=\"Custom\">\n")
  + std::string("        <pIsAvailable>BalanceControlAvailable</pIsAvailable>\n")
  + std::string("        <Address>0xC0014000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("    <FloatReg Name=\"BalanceRatioMinReg\" NameSpace=\"Custom\">\n")
  + std::string("        <pIsAvailable>BalanceControlAvailable</pIsAvailable>\n")
  + std::string("        <Address>0xC0015000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("    <FloatReg Name=\"BalanceRatioMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <pIsAvailable>BalanceControlAvailable</pIsAvailable>\n")
  + std::string("        <Address>0xC0016000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("    <Enumeration Name=\"BalanceWhiteAuto\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Auto white balance mode; Continuous activates a simple gray-world algorithm.</ToolTip>\n")
  + std::string("        <Description>Auto white balance mode; Continuous activates a simple gray-world algorithm.</Description>\n")
  + std::string("        <pIsAvailable>BalanceControlAvailable</pIsAvailable>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Off\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Continuous\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>2</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>BalanceWhiteAutoReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"BalanceWhiteAutoReg\" NameSpace=\"Custom\">\n")
  + std::string("        <pIsAvailable>BalanceControlAvailable</pIsAvailable>\n")
  + std::string("        <Address>0xC0017000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Image format control -->\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SensorWidth\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>SensorWidthReg</pValue>\n")
  + std::string("        <pMin>SensorWidthReg</pMin>\n")
  + std::string("        <pMax>SensorWidthReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SensorWidthReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0000000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SensorHeight\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>SensorHeightReg</pValue>\n")
  + std::string("        <pMin>SensorHeightReg</pMin>\n")
  + std::string("        <pMax>SensorHeightReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SensorHeightReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0001000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"BinningHorizontal\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <Value>1</Value>\n")
  + std::string("        <Min>1</Min>\n")
  + std::string("        <Max>1</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"BinningVertical\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <Value>1</Value>\n")
  + std::string("        <Min>1</Min>\n")
  + std::string("        <Max>1</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"PixelFormat\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>The pixel format for the component. This is not necessarily identical to InputPixelFormat: converted / debayered output from the FPGA will always arrive as Mono8, Mono12, or RGB8.</ToolTip>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pInvalidator>IntensitySource</pInvalidator> <!-- changing the source may change the pixel format for Intensity -->\n")
  + std::string("        <EnumEntry Name=\"Mono8\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0x01080001</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Mono12\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0x01100005</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Coord3D_ABC32f\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0x026000C0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"RGB8\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0x02180014</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>PixelFormatValue</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"PixelFormatValue\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pIndex>ComponentSelectorReg</pIndex>\n")
  + std::string("        <pValueIndexed Index=\"0\">PixelFormatReg</pValueIndexed>\n")
  + std::string("        <ValueIndexed Index=\"1\">0x01100005</ValueIndexed>\n")
  + std::string("        <ValueIndexed Index=\"2\">0x026000C0</ValueIndexed>\n")
  + std::string("        <ValueDefault>0x01080001</ValueDefault>\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <IntReg Name=\"PixelFormatReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0002000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Image format control: dynamic ROI parameters -->\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"Width\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>WidthReg</pValue>\n")
  + std::string("        <pMin>WidthMinReg</pMin>\n")
  + std::string("        <pMax>SensorWidthReg</pMax>\n")
  + std::string("        <pInc>WidthIncReg</pInc>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"WidthReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC001F000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"WidthMinReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0020000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"WidthIncReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0021000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"Height\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>HeightReg</pValue>\n")
  + std::string("        <pMin>HeightMinReg</pMin>\n")
  + std::string("        <pMax>SensorHeightReg</pMax>\n")
  + std::string("        <pInc>HeightIncReg</pInc>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"HeightReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0022000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"HeightMinReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0023000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"HeightIncReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0024000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"OffsetX\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pInvalidator>Width</pInvalidator>\n")
  + std::string("        <pInvalidator>Height</pInvalidator>\n")
  + std::string("        <pValue>OffsetXReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <pMax>OffsetXMaxReg</pMax>\n")
  + std::string("        <pInc>OffsetXIncReg</pInc>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"OffsetXReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0025000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>Width</pInvalidator>\n")
  + std::string("        <pInvalidator>Height</pInvalidator>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"OffsetXMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0026000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>Width</pInvalidator>\n")
  + std::string("        <pInvalidator>Height</pInvalidator>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"OffsetXIncReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0027000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>Width</pInvalidator>\n")
  + std::string("        <pInvalidator>Height</pInvalidator>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"OffsetY\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pInvalidator>Width</pInvalidator>\n")
  + std::string("        <pInvalidator>Height</pInvalidator>\n")
  + std::string("        <pValue>OffsetYReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <pMax>OffsetYMaxReg</pMax>\n")
  + std::string("        <pInc>OffsetYIncReg</pInc>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"OffsetYReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0028000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>Width</pInvalidator>\n")
  + std::string("        <pInvalidator>Height</pInvalidator>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"OffsetYMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0029000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>Width</pInvalidator>\n")
  + std::string("        <pInvalidator>Height</pInvalidator>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"OffsetYIncReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC002A000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>Width</pInvalidator>\n")
  + std::string("        <pInvalidator>Height</pInvalidator>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Image format control: active components -->\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"ComponentSelector\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pInvalidator>IntensitySource</pInvalidator> <!-- changing the source may change the pixel format for Intensity -->\n")
  + std::string("\n")
  + std::string("        <EnumEntry Name=\"Intensity\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Disparity\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Range\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>2</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("\n")
  + std::string("        <pValue>ComponentSelectorReg</pValue>\n")
  + std::string("        <pSelected>PixelFormat</pSelected>\n")
  + std::string("        <pSelected>ComponentEnable</pSelected>\n")
  + std::string("        <pSelected>ComponentIDValue</pSelected>\n")
  + std::string("        <pSelected>Scan3dInvalidDataFlag</pSelected>\n")
  + std::string("        <pSelected>Scan3dInvalidDataValue</pSelected>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"ComponentSelectorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xD0000000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>ComponentSelector</pInvalidator>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"ComponentEnable\" NameSpace=\"Standard\">\n")
  + std::string("        <pIsLocked>ComponentEnableWriteLocked</pIsLocked>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>ComponentEnableIntConv</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("    <!-- Interim state: toggling ComponentEnable is just possible for Range (point cloud calc) -->\n")
  + std::string("    <IntSwissKnife Name=\"ComponentEnableWriteLocked\" NameSpace=\"Custom\">\n")
  + std::string("        <pInvalidator>ComponentEnable</pInvalidator>\n")
  + std::string("        <pVariable Name=\"selval\">ComponentSelector</pVariable>\n")
  + std::string("        <Formula>(selval = 2) ? 0 : 1</Formula>\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <IntConverter Name=\"ComponentEnableIntConv\" NameSpace=\"Custom\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pVariable Name=\"regval\">ComponentEnableReg</pVariable>\n")
  + std::string("        <pVariable Name=\"selval\">ComponentSelector</pVariable>\n")
  + std::string("        <FormulaTo>  <![CDATA[ ( FROM ? (regval | (1<<selval)) : (regval & (0x7-(1<<selval))) ) & 0x7 ]]></FormulaTo>\n")
  + std::string("        <FormulaFrom><![CDATA[ (regval & (1<<selval)) > 0 ]]></FormulaFrom>\n")
  + std::string("        <pValue>ComponentEnableReg</pValue>\n")
  + std::string("        <Slope>Varying</Slope> <!-- Mandatory! Set operation fails with default Slope==Automatic -->\n")
  + std::string("    </IntConverter>\n")
  + std::string("    <IntReg Name=\"ComponentEnableReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0004000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"ComponentIDValue\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pIndex>ComponentSelectorReg</pIndex>\n")
  + std::string("        <ValueIndexed Index=\"0\">1</ValueIndexed>\n")
  + std::string("        <ValueIndexed Index=\"1\">8</ValueIndexed>\n")
  + std::string("        <ValueIndexed Index=\"2\">4</ValueIndexed>\n")
  + std::string("        <ValueDefault>1</ValueDefault>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>15</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <!-- Nerian-specific features -->\n")
  + std::string("    <!-- Source for the multipart 'Intensity' channel, for models with more than 2 cameras -->\n")
  + std::string("    <IntSwissKnife Name=\"ThirdCameraPresent\" NameSpace=\"Custom\">\n")
  + std::string("        <ToolTip>Indicates whether this is a three-camera Nerian device.</ToolTip>\n")
  + std::string("        <Description>Indicates whether this is a three-camera Nerian device.</Description>\n")
  + std::string("        <pVariable Name=\"bitmask\">DeviceFeatureReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 1</Formula> <!-- Bit 0: availability of third camera -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <Enumeration Name=\"IntensitySource\" NameSpace=\"Custom\">\n")
  + std::string("        <ToolTip>The camera to dedicate to the Intensity purpose of a GenTL multipart stream (other active channel is appended with Custom0 purpose). Auto setting prefers color camera, if that channel is activated.</ToolTip>\n")
  + std::string("        <Description>The camera to dedicate to the Intensity purpose of a GenTL multipart stream (other active channel is appended with Custom0 purpose). Auto setting prefers color camera, if that channel is activated.</Description>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <pIsAvailable>ThirdCameraPresent</pIsAvailable>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Auto\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"LeftCamera\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"ColorCamera\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>2</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>IntensitySourceReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"IntensitySourceReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0018000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Transport layer control -->\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"PayloadSize\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pInvalidator>ComponentEnable</pInvalidator>\n")
  + std::string("        <pInvalidator>IntensitySource</pInvalidator> <!-- changing the source may change the pixel format for Intensity -->\n")
  + std::string("        <pInvalidator>Width</pInvalidator>\n")
  + std::string("        <pInvalidator>Height</pInvalidator>\n")
  + std::string("        <pValue>PayloadSizeReg</pValue>\n")
  + std::string("        <Min>1</Min>\n")
  + std::string("        <Max>0xFFFFFFFF</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"PayloadSizeReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0003000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>ComponentEnable</pInvalidator>\n")
  + std::string("        <pInvalidator>Width</pInvalidator>\n")
  + std::string("        <pInvalidator>Height</pInvalidator>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"TLParamsLocked\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Invisible</Visibility>\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>1</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <!-- Scan3d control -->\n")
  + std::string("\n")
  + std::string("    <Float Name=\"Scan3dFocalLength\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>Scan3dFocalLengthReg</pValue>\n")
  + std::string("        <Unit>Pixel</Unit>\n")
  + std::string("    </Float>\n")
  + std::string("    <FloatReg Name=\"Scan3dFocalLengthReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0006000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("\n")
  + std::string("    <Float Name=\"Scan3dBaseline\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>Scan3dBaselineReg</pValue>\n")
  + std::string("        <Unit>m</Unit>\n")
  + std::string("    </Float>\n")
  + std::string("    <FloatReg Name=\"Scan3dBaselineReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0007000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("\n")
  + std::string("    <IntSwissKnife Name=\"InvalidIndex\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">ComponentEnableReg</pVariable>\n")
  + std::string("        <Formula>bitmask = 1 ? 0 : (bitmask = 2 ? 1 : 2)</Formula>\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("\n")
  + std::string("    <!-- Invalid data values: values are set internally in code\n")
  + std::string("      based on stream type and current component selector -->\n")
  + std::string("    <Boolean Name=\"Scan3dInvalidDataFlag\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pInvalidator>ComponentSelector</pInvalidator>\n")
  + std::string("        <pValue>Scan3dInvalidDataFlagReg</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("    <IntReg Name=\"Scan3dInvalidDataFlagReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC001D000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>ComponentSelector</pInvalidator>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Float Name=\"Scan3dInvalidDataValue\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pInvalidator>ComponentSelector</pInvalidator>\n")
  + std::string("        <pValue>Scan3dInvalidDataValueReg</pValue>\n")
  + std::string("    </Float>\n")
  + std::string("    <FloatReg Name=\"Scan3dInvalidDataValueReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0008000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>ComponentSelector</pInvalidator>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("\n")
  + std::string("    <Float Name=\"Scan3dPrincipalPointU\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>Scan3dPrincipalPointUReg</pValue>\n")
  + std::string("    </Float>\n")
  + std::string("    <FloatReg Name=\"Scan3dPrincipalPointUReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0009000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("\n")
  + std::string("    <Float Name=\"Scan3dPrincipalPointV\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>Scan3dPrincipalPointVReg</pValue>\n")
  + std::string("    </Float>\n")
  + std::string("    <FloatReg Name=\"Scan3dPrincipalPointVReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC000A000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("\n")
  + std::string("    <Float Name=\"Scan3dCoordinateScale\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <Value>1.0</Value>\n")
  + std::string("    </Float>\n")
  + std::string("\n")
  + std::string("    <Float Name=\"Scan3dCoordinateOffset\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <Value>0.0</Value>\n")
  + std::string("    </Float>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"Scan3dOutputMode\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"UncalibratedC\" NameSpace=\"Standard\">           <Value>0</Value></EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"CalibratedABC_Grid\" NameSpace=\"Standard\">  <Value>1</Value>    </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"CalibratedABC_PointCloud\" NameSpace=\"Standard\"><Value>2</Value></EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"CalibratedAC\" NameSpace=\"Standard\">            <Value>3</Value></EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"CalibratedAC_Linescan\" NameSpace=\"Standard\">   <Value>4</Value></EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"CalibratedC\" NameSpace=\"Standard\">             <Value>5</Value></EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"CalibratedC_Linescan\" NameSpace=\"Standard\">    <Value>6</Value></EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"RectifiedC\" NameSpace=\"Standard\">              <Value>7</Value></EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"RectifiedC_Linescan\" NameSpace=\"Standard\">     <Value>8</Value></EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"DisparityC\" NameSpace=\"Standard\">              <Value>9</Value></EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"DisparityC_Linescan\" NameSpace=\"Standard\">     <Value>10</Value></EnumEntry>\n")
  + std::string("        <Value>1</Value>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <!-- Digital I/O control -->\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"LineSelector\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Selector for the (virtual) digital I/O lines. Line0 is the primary internal camera trigger, Line1 is the external trigger I/O connection.</ToolTip>\n")
  + std::string("        <Description>Selector for the (virtual) digital I/O lines. Line0 is the primary internal camera trigger, Line1 is the external trigger I/O connection.</Description>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Line0\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Line1\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>LineSelectorReg</pValue>\n")
  + std::string("        <pSelected>LineMode</pSelected>\n")
  + std::string("        <pSelected>LineModeReg</pSelected>\n")
  + std::string("        <pSelected>LineInverter</pSelected>\n")
  + std::string("        <pSelected>LineInverterReg</pSelected>\n")
  + std::string("        <pSelected>LineSource</pSelected>\n")
  + std::string("        <pSelected>LineSourceReg</pSelected>\n")
  + std::string("        <pSelected>LinePulseWidthAlternationMode</pSelected>\n")
  + std::string("        <pSelected>LinePulseWidthAlternationModeReg</pSelected>\n")
  + std::string("        <pSelected>LinePulseWidth</pSelected>\n")
  + std::string("        <pSelected>LinePulseWidthReg</pSelected>\n")
  + std::string("        <pSelected>LineOffset</pSelected>\n")
  + std::string("        <pSelected>LineOffsetReg</pSelected>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"LineSelectorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC004D000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"LineMode\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Mode for digital I/O. Line0 (primary internal camera trigger) is always in Output mode. Line1 operates as a secondary Output, or as the hardware trigger Input (on devices that support it).</ToolTip>\n")
  + std::string("        <Description>Mode for digital I/O. Line0 (primary internal camera trigger) is always in Output mode. Line1 operates as a secondary Output, or as the hardware trigger Input (on devices that support it).</Description>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Output\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Input\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>LineSettableToInput</pIsAvailable>\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>LineModeReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"LineModeReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC004E000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntSwissKnife Name=\"LineSettableToInput\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"selector\">LineSelectorReg</pVariable>\n")
  + std::string("        <pVariable Name=\"supported\">HardwareTriggerInputPresent</pVariable>\n")
  + std::string("        <Formula>selector &amp; supported</Formula> <!-- Only Line1 is settable to Input, and only on supported devices -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"LineInverter\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Inverter for the selected output line. False means active-high, True means active-low.</ToolTip>\n")
  + std::string("        <Description>Inverter for the selected output line. False means active-high, True means active-low.</Description>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"False\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"True\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>LineInverterReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"LineInverterReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC004F000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"LineSource\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Output source for the given I/O line (unless set to Input mode). FrameTrigger: emit internal trigger with configured AcquisitionFrameRate; UserOutput0: emit constant logical 0 (before any inversion); UserOutput1: emit constant logical 1 (before any inversion).</ToolTip>\n")
  + std::string("        <Description>Output source for the given I/O line (unless set to Input mode). FrameTrigger: emit internal trigger with configured AcquisitionFrameRate; UserOutput0: emit constant logical 0 (before any inversion); UserOutput1: emit constant logical 1 (before any inversion).</Description>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"UserOutput0\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"UserOutput1\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"FrameTrigger\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>2</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>LineSourceReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"LineSourceReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0050000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"UserOutputSelector\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Selector for the user output data, set to constant 0 and 1 for emitting constant levels if configured.</ToolTip>\n")
  + std::string("        <Description>Selector for the user output data, set to constant 0 and 1 for emitting constant levels if configured.</Description>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"UserOutput0\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"UserOutput1\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>UserOutputSelectorReg</pValue>\n")
  + std::string("        <pSelected>UserOutputValue</pSelected>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"UserOutputSelectorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0058000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"UserOutputValue\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>UserOutputSelectorReg</pValue>\n")
  + std::string("        <!-- The value mirrors the index (0, 1); convenient selection of constant values -->\n")
  + std::string("    </Integer>\n")
  + std::string("\n")
  + std::string("    <!-- Nerian-specific features -->\n")
  + std::string("\n")
  + std::string("    <!-- Digital I/O control: custom Nerian extensions -->\n")
  + std::string("    \n")
  + std::string("    <Enumeration Name=\"LinePulseWidthSelector\" NameSpace=\"Custom\">\n")
  + std::string("        <ToolTip>Selector for accessing the n-th pulse width when LinePulseWidthAlternationMode is 'Cycle'. A zero width terminates the alternation sequence.</ToolTip>\n")
  + std::string("        <Description>Selector for accessing the n-th pulse width when LinePulseWidthAlternationMode is 'Cycle'. A zero width terminates the alternation sequence.</Description>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pInvalidator>LinePulseWidthAlternationMode</pInvalidator> <!-- Constant mode resets selector to first pulse -->\n")
  + std::string("        <EnumEntry Name=\"PulseWidth1\" NameSpace=\"Custom\"> <Value>0</Value> </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"PulseWidth2\" NameSpace=\"Custom\"> <pIsAvailable>LinePulseWidthAlternationMode</pIsAvailable> <Value>1</Value> </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"PulseWidth3\" NameSpace=\"Custom\"> <pIsAvailable>LinePulseWidthAlternationMode</pIsAvailable> <Value>2</Value> </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"PulseWidth4\" NameSpace=\"Custom\"> <pIsAvailable>LinePulseWidthAlternationMode</pIsAvailable> <Value>3</Value> </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"PulseWidth5\" NameSpace=\"Custom\"> <pIsAvailable>LinePulseWidthAlternationMode</pIsAvailable> <Value>4</Value> </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"PulseWidth6\" NameSpace=\"Custom\"> <pIsAvailable>LinePulseWidthAlternationMode</pIsAvailable> <Value>5</Value> </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"PulseWidth7\" NameSpace=\"Custom\"> <pIsAvailable>LinePulseWidthAlternationMode</pIsAvailable> <Value>6</Value> </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"PulseWidth8\" NameSpace=\"Custom\"> <pIsAvailable>LinePulseWidthAlternationMode</pIsAvailable> <Value>7</Value> </EnumEntry>\n")
  + std::string("        <pValue>LinePulseWidthSelectorReg</pValue>\n")
  + std::string("        <pSelected>LinePulseWidth</pSelected>\n")
  + std::string("        <pSelected>LinePulseWidthReg</pSelected>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"LinePulseWidthSelectorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0051000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"LinePulseWidthAlternationMode\" NameSpace=\"Custom\">\n")
  + std::string("        <!-- Selected by LineSelector -->\n")
  + std::string("        <ToolTip>Activate or deactivate the cycling through a configured sequence of pulse widths for subsequent trigger output events.</ToolTip>\n")
  + std::string("        <Description>Activate or deactivate the cycling through a configured sequence of pulse widths for subsequent trigger output events.</Description>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Constant\" NameSpace=\"Custom\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Cycle\" NameSpace=\"Custom\">\n")
  + std::string("            <Value>1</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>LinePulseWidthAlternationModeReg</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("    <IntReg Name=\"LinePulseWidthAlternationModeReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0052000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"LinePulseWidth\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>The n-th pulse width when LinePulseWidthAlternationMode is 'Cycle'. A zero width terminates the alternation sequence.</ToolTip>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>LinePulseWidthReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <pMax>LinePulseWidthMaxReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"LinePulseWidthReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0053000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"LinePulseWidthMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0054000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"LineOffset\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>LineOffsetReg</pValue>\n")
  + std::string("        <pMin>LineOffsetMinReg</pMin>\n")
  + std::string("        <pMax>LineOffsetMaxReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"LineOffsetReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0055000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"LineOffsetMinReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0056000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"LineOffsetMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0057000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Selection of camera (sensor) pixel format - this need not be the same as the post-FPGA output format -->\n")
  + std::string("    <IntReg Name=\"InputPixelFormatsAvailableReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC004A000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntSwissKnife Name=\"InputPixelFormatAvailableMono8\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">InputPixelFormatsAvailableReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 1</Formula> <!-- Bit 0: availability of MONO_8 input -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <IntSwissKnife Name=\"InputPixelFormatAvailableMono12\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">InputPixelFormatsAvailableReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 2</Formula> <!-- Bit 1: availability of MONO_12 input -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <IntSwissKnife Name=\"InputPixelFormatAvailableMono12P\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">InputPixelFormatsAvailableReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 4</Formula> <!-- Bit 2: availability of MONO_12P input -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <IntSwissKnife Name=\"InputPixelFormatAvailableMono12Packed\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">InputPixelFormatsAvailableReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 8</Formula> <!-- Bit 3: availability of MONO_12PACKED input -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <IntSwissKnife Name=\"InputPixelFormatAvailableRGB8\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">InputPixelFormatsAvailableReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 16</Formula> <!-- Bit 4: availability of RGB_8 input -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <IntSwissKnife Name=\"InputPixelFormatAvailableBayerGR8\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">InputPixelFormatsAvailableReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 32</Formula> <!-- Bit 6: availability of BAYER_GR8 input -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <IntSwissKnife Name=\"InputPixelFormatAvailableBayerRG8\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">InputPixelFormatsAvailableReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 64</Formula> <!-- Bit 7: availability of BAYER_RG8 input -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <IntSwissKnife Name=\"InputPixelFormatAvailableBayerGB8\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">InputPixelFormatsAvailableReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 128</Formula> <!-- Bit 8: availability of BAYER_GB8 input -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <IntSwissKnife Name=\"InputPixelFormatAvailableBayerBG8\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">InputPixelFormatsAvailableReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 256</Formula> <!-- Bit 9: availability of BAYER_BG8 input -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <!--IntSwissKnife Name=\"InputPixelFormatAvailableRGB8Packed\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">InputPixelFormatsAvailableReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 512</Formula--> <!-- Bit 5: availability of RGB_8PACKED input -->\n")
  + std::string("    <!--/IntSwissKnife-->\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"InputPixelFormatValue\" NameSpace=\"Custom\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>InputPixelFormatReg</pValue>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"InputPixelFormatReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC004B000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"InputPixelFormat\" NameSpace=\"Custom\">\n")
  + std::string("        <ToolTip>The pixel format for the stereo camera sensors. Not the same as the output PixelFormat: the FPGA may convert the format.</ToolTip>\n")
  + std::string("        <Description>The pixel format for the stereo camera sensors. Not the same as the output PixelFormat: the FPGA may convert the format.</Description>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Mono8\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>InputPixelFormatAvailableMono8</pIsAvailable>\n")
  + std::string("            <Value>0x01080001</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Mono12\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>InputPixelFormatAvailableMono12</pIsAvailable>\n")
  + std::string("            <Value>0x01100005</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Mono12P\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>InputPixelFormatAvailableMono12P</pIsAvailable>\n")
  + std::string("            <Value>0x010C0047</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"Mono12Packed\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>InputPixelFormatAvailableMono12Packed</pIsAvailable>\n")
  + std::string("            <Value>0x010C0006</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"RGB8\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>InputPixelFormatAvailableRGB8</pIsAvailable>\n")
  + std::string("            <Value>0x02180014</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"BayerGR8\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>InputPixelFormatAvailableBayerGR8</pIsAvailable>\n")
  + std::string("            <Value>0x01080008</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"BayerRG8\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>InputPixelFormatAvailableBayerRG8</pIsAvailable>\n")
  + std::string("            <Value>0x01080009</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"BayerGB8\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>InputPixelFormatAvailableBayerGB8</pIsAvailable>\n")
  + std::string("            <Value>0x0108000A</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <EnumEntry Name=\"BayerBG8\" NameSpace=\"Standard\">\n")
  + std::string("            <pIsAvailable>InputPixelFormatAvailableBayerBG8</pIsAvailable>\n")
  + std::string("            <Value>0x0108000B</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <pValue>InputPixelFormatValue</pValue>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <!-- Stereo algorithm parameters -->\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"NumberOfDisparities\" NameSpace=\"Custom\">\n")
  + std::string("        <ToolTip>The horizontal range in pixels for which correspondences can be found, sethigher to allow measurement of closer objects. Influences available frame rate and available image sizes.</ToolTip>\n")
  + std::string("        <Description>The horizontal range in pixels for which correspondences can be found, set higher to allow measurement of closer objects. Influences available frame rate and available image sizes.</Description>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>NumberOfDisparitiesReg</pValue>\n")
  + std::string("        <pMin>NumberOfDisparitiesMinReg</pMin>\n")
  + std::string("        <pMax>NumberOfDisparitiesMaxReg</pMax>\n")
  + std::string("        <pInc>NumberOfDisparitiesIncReg</pInc>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"NumberOfDisparitiesReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0030000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"NumberOfDisparitiesMinReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0031000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"NumberOfDisparitiesMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0032000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"NumberOfDisparitiesIncReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0033000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"DisparityOffset\" NameSpace=\"Custom\">\n")
  + std::string("        <ToolTip>The minimum disparity for successful matching. Non-zero values allow measuring closer objects, at the expense of not detecting the most distant objects. Influences available image sizes.</ToolTip>\n")
  + std::string("        <Description>The minimum disparity for successful matching. Non-zero values allow measuring closer objects, at the expense of not detecting the most distant objects. Influences available image sizes.</Description>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pInvalidator>NumberOfDisparities</pInvalidator>\n")
  + std::string("        <pInvalidator>NumberOfDisparitiesReg</pInvalidator>\n")
  + std::string("        <pValue>DisparityOffsetReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <pMax>DisparityOffsetMax</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"DisparityOffsetReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0034000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>NumberOfDisparities</pInvalidator>\n")
  + std::string("        <pInvalidator>NumberOfDisparitiesReg</pInvalidator>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntSwissKnife Name=\"DisparityOffsetMax\" NameSpace=\"Custom\">\n")
  + std::string("        <pInvalidator>NumberOfDisparities</pInvalidator>\n")
  + std::string("        <pInvalidator>NumberOfDisparitiesReg</pInvalidator>\n")
  + std::string("        <pVariable Name=\"maxNumDisp\">NumberOfDisparitiesMaxReg</pVariable>\n")
  + std::string("        <pVariable Name=\"numDisp\">NumberOfDisparities</pVariable>\n")
  + std::string("        <Formula>maxNumDisp - numDisp</Formula>\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SgmP1NoEdge\" NameSpace=\"Custom\">\n")
  + std::string("        <ToolTip>The SGM P1 penalty parameter for small disparity changes, where not at an edge in the image</ToolTip>\n")
  + std::string("        <Description>The SGM P1 penalty parameter for small disparity changes, where not at an edge in the image</Description>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SgmP1NoEdgeReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>255</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SgmP1NoEdgeReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0035000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SgmP1Edge\" NameSpace=\"Custom\">\n")
  + std::string("        <ToolTip>The SGM P1 penalty parameter for small disparity changes, where at a detected edge in the image</ToolTip>\n")
  + std::string("        <Description>The SGM P1 penalty parameter for small disparity changes, where at a detected edge in the image</Description>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SgmP1EdgeReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>255</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SgmP1EdgeReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0036000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SgmP2NoEdge\" NameSpace=\"Custom\">\n")
  + std::string("        <ToolTip>The SGM P2 penalty parameter for larger disparity changes, where not at an edge in the image</ToolTip>\n")
  + std::string("        <Description>The SGM P2 penalty parameter for larger disparity changes, where not at an edge in the image</Description>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SgmP2NoEdgeReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>255</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SgmP2NoEdgeReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0037000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SgmP2Edge\" NameSpace=\"Custom\">\n")
  + std::string("        <ToolTip>The SGM P2 penalty parameter for larger disparity changes, where at a detected edge in the image</ToolTip>\n")
  + std::string("        <Description>The SGM P2 penalty parameter for larger disparity changes, where at a detected edge in the image</Description>\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SgmP2EdgeReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>255</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SgmP2EdgeReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0038000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SgmEdgeSensitivity\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SgmEdgeSensitivityReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>255</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SgmEdgeSensitivityReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0039000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"SubpixelOptimizationROIEnabled\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SubpixelOptimizationROIEnabledReg</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("    <IntReg Name=\"SubpixelOptimizationROIEnabledReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC003A000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SubpixelOptimizationROIWidth\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SubpixelOptimizationROIWidthReg</pValue>\n")
  + std::string("        <Min>16</Min>\n")
  + std::string("        <pMax>WidthReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SubpixelOptimizationROIWidthReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC003B000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SubpixelOptimizationROIHeight\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SubpixelOptimizationROIHeightReg</pValue>\n")
  + std::string("        <Min>16</Min>\n")
  + std::string("        <pMax>HeightReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SubpixelOptimizationROIHeightReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC003C000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SubpixelOptimizationROIOffsetX\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SubpixelOptimizationROIOffsetXReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <pMax>OffsetXMaxReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SubpixelOptimizationROIOffsetXReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC003D000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SubpixelOptimizationROIOffsetY\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SubpixelOptimizationROIOffsetYReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <pMax>OffsetYMaxReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SubpixelOptimizationROIOffsetYReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC003E000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"MaskBorderPixelsEnabled\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>MaskBorderPixelsEnabledReg</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("    <IntReg Name=\"MaskBorderPixelsEnabledReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC003F000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"ConsistencyCheckEnabled\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>ConsistencyCheckEnabledReg</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("    <IntReg Name=\"ConsistencyCheckEnabledReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0040000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"ConsistencyCheckSensitivity\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>ConsistencyCheckSensitivityReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>15</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"ConsistencyCheckSensitivityReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0041000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"UniquenessCheckEnabled\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>UniquenessCheckEnabledReg</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("    <IntReg Name=\"UniquenessCheckEnabledReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0042000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"UniquenessCheckSensitivity\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>UniquenessCheckSensitivityReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>256</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"UniquenessCheckSensitivityReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0043000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"TextureFilterEnabled\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>TextureFilterEnabledReg</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("    <IntReg Name=\"TextureFilterEnabledReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0044000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"TextureFilterSensitivity\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>TextureFilterSensitivityReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>63</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"TextureFilterSensitivityReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0045000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"GapInterpolationEnabled\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>GapInterpolationEnabledReg</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("    <IntReg Name=\"GapInterpolationEnabledReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0046000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"NoiseReductionEnabled\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>NoiseReductionEnabledReg</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("    <IntReg Name=\"NoiseReductionEnabledReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0047000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"SpeckleFilterIterations\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>SpeckleFilterIterationsReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <pMax>SpeckleFilterIterationsMaxReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"SpeckleFilterIterationsReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0048000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <IntReg Name=\"SpeckleFilterIterationsMaxReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC0049000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Additional controllable hardware -->\n")
  + std::string("\n")
  + std::string("    <!-- Integrated IR pattern projector (not available on all models) -->\n")
  + std::string("    <IntSwissKnife Name=\"PatternProjectorPresent\" NameSpace=\"Custom\">\n")
  + std::string("        <pVariable Name=\"bitmask\">DeviceFeatureReg</pVariable>\n")
  + std::string("        <Formula>bitmask &amp; 8</Formula> <!-- Bit 3: availability of pattern projector -->\n")
  + std::string("    </IntSwissKnife>\n")
  + std::string("    <Float Name=\"PatternProjectorBrightness\" NameSpace=\"Custom\">\n")
  + std::string("        <pIsAvailable>PatternProjectorPresent</pIsAvailable>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>PatternProjectorBrightnessReg</pValue>\n")
  + std::string("        <Min>0.0</Min>\n")
  + std::string("        <Max>100.0</Max>\n")
  + std::string("    </Float>\n")
  + std::string("    <FloatReg Name=\"PatternProjectorBrightnessReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC002F000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("\n")
  + std::string("    <!-- Metadata (Nerian-specific custom data) -->\n")
  + std::string("\n")
  + std::string("    <!-- Read access to Q matrix (as 16-element data array) -->\n")
  + std::string("    <Integer Name=\"QMatrixIndex\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>QMatrixIndexReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>15</Max>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"QMatrixIndexReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC001B000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("    <FloatReg Name=\"QMatrixData\" NameSpace=\"Custom\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xC001C000</Address>\n")
  + std::string("        <Length>8</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <pInvalidator>QMatrixIndex</pInvalidator>\n")
  + std::string("        <pInvalidator>QMatrixIndexReg</pInvalidator>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </FloatReg>\n")
  + std::string("\n")
  + std::string("    <!-- DEBUG STUFF -->\n")
  + std::string("\n")
  + std::string("    <Command Name=\"FlushOutputQueue\" NameSpace=\"Standard\">\n")
  + std::string("        <ToolTip>Flush the GenTL output queue of all data streams to discard all queued frames.</ToolTip>\n")
  + std::string("        <Description>Flush the GenTL output queue of all data streams to discard all queued frames.</Description>\n")
  + std::string("        <ImposedAccessMode>WO</ImposedAccessMode>\n")
  + std::string("        <pValue>FlushOutputQueueBool</pValue>\n")
  + std::string("        <CommandValue>1</CommandValue>\n")
  + std::string("    </Command>\n")
  + std::string("\n")
  + std::string("    <Boolean Name=\"FlushOutputQueueBool\" NameSpace=\"Custom\">\n")
  + std::string("        <ImposedAccessMode>WO</ImposedAccessMode>\n")
  + std::string("        <pValue>FlushOutputQueueReg</pValue>\n")
  + std::string("    </Boolean>\n")
  + std::string("\n")
  + std::string("    <IntReg Name=\"FlushOutputQueueReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xC00F1000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>WO</AccessMode>\n")
  + std::string("        <pPort>Device</pPort>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("\n")
  + std::string("</RegisterDescription>\n")
  + std::string("\n")
)},


{"system.xml", FileData(24, 155, 48893, std::string("")
  + std::string("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n")
  + std::string("<RegisterDescription\n")
  + std::string("    ModelName=\"NerianGentTLSystem\"\n")
  + std::string("    VendorName=\"Allied_Vision_Technologies_GmbH\"\n")
  + std::string("    ToolTip=\"TL System\"\n")
  + std::string("    StandardNameSpace=\"None\"\n")
  + std::string("    SchemaMajorVersion=\"1\"\n")
  + std::string("    SchemaMinorVersion=\"1\"\n")
  + std::string("    SchemaSubMinorVersion=\"0\"\n")
  + std::string("    MajorVersion=\"24\"\n")
  + std::string("    MinorVersion=\"155\"\n")
  + std::string("    SubMinorVersion=\"48893\"\n")
  + std::string("    ProductGuid=\"c650296e-06df-41cc-a090-853c5add423c\"\n")
  + std::string("    VersionGuid=\"beeb5bb6-d7c5-2c70-3ae5-6c657da31a12\"\n")
  + std::string("    xmlns=\"http://www.genicam.org/GenApi/Version_1_1\"\n")
  + std::string("    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n")
  + std::string("    xsi:schemaLocation=\"http://www.genicam.org/GenApi/Version_1_1 http://www.genicam.org/GenApi/GenApiSchema_Version_1_1.xsd\">\n")
  + std::string("\n")
  + std::string("    <!-- Categories -->\n")
  + std::string("    <Category Name=\"Root\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>SystemInformation</pFeature>\n")
  + std::string("        <pFeature>InterfaceEnumeration</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"SystemInformation\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>TLID</pFeature>\n")
  + std::string("        <pFeature>TLVendorName</pFeature>\n")
  + std::string("        <pFeature>TLModelName</pFeature>\n")
  + std::string("        <pFeature>TLVersion</pFeature>\n")
  + std::string("        <pFeature>TLPath</pFeature>\n")
  + std::string("        <pFeature>TLType</pFeature>\n")
  + std::string("        <pFeature>GenTLVersionMajor</pFeature>\n")
  + std::string("        <pFeature>GenTLVersionMinor</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <Category Name=\"InterfaceEnumeration\" NameSpace=\"Standard\">\n")
  + std::string("        <pFeature>InterfaceUpdateList</pFeature>\n")
  + std::string("        <pFeature>InterfaceSelector</pFeature>\n")
  + std::string("        <pFeature>InterfaceID</pFeature>\n")
  + std::string("    </Category>\n")
  + std::string("\n")
  + std::string("    <!-- System information -->\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"TLID\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xE0000000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>TLPort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"TLVendorName\" NameSpace=\"Standard\">\n")
  + std::string("        <Address>0xE0001000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>TLPort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"TLModelName\" NameSpace=\"Standard\">\n")
  + std::string("        <Address>0xE0002000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>TLPort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"TLVersion\" NameSpace=\"Standard\">\n")
  + std::string("        <Address>0xE0003000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>TLPort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"TLPath\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <Address>0xE0006000</Address>\n")
  + std::string("        <Length>1024</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>TLPort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <Enumeration Name=\"TLType\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <EnumEntry Name=\"Ethernet\" NameSpace=\"Standard\">\n")
  + std::string("            <Value>0</Value>\n")
  + std::string("        </EnumEntry>\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("    </Enumeration>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"GenTLVersionMajor\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>GenTLVersionMajorReg</pValue>\n")
  + std::string("        <pMin>GenTLVersionMajorReg</pMin>\n")
  + std::string("        <pMax>GenTLVersionMajorReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"GenTLVersionMajorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xE0009000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>TLPort</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"GenTLVersionMinor\" NameSpace=\"Standard\">\n")
  + std::string("        <Visibility>Expert</Visibility>\n")
  + std::string("        <ImposedAccessMode>RO</ImposedAccessMode>\n")
  + std::string("        <pValue>GenTLVersionMinorReg</pValue>\n")
  + std::string("        <pMin>GenTLVersionMinorReg</pMin>\n")
  + std::string("        <pMax>GenTLVersionMinorReg</pMax>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"GenTLVersionMinorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xE000A000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>TLPort</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <!-- Interface enumeration -->\n")
  + std::string("\n")
  + std::string("    <Command Name=\"InterfaceUpdateList\" NameSpace=\"Standard\">\n")
  + std::string("        <!-- This command has no effect -->\n")
  + std::string("        <ImposedAccessMode>WO</ImposedAccessMode>\n")
  + std::string("        <Value>0</Value>\n")
  + std::string("        <CommandValue>0</CommandValue>\n")
  + std::string("    </Command>\n")
  + std::string("\n")
  + std::string("    <Integer Name=\"InterfaceSelector\" NameSpace=\"Standard\">\n")
  + std::string("        <ImposedAccessMode>RW</ImposedAccessMode>\n")
  + std::string("        <pValue>InterfaceSelectorReg</pValue>\n")
  + std::string("        <Min>0</Min>\n")
  + std::string("        <Max>0</Max>\n")
  + std::string("        <pSelected>InterfaceID</pSelected>\n")
  + std::string("    </Integer>\n")
  + std::string("    <IntReg Name=\"InterfaceSelectorReg\" NameSpace=\"Custom\">\n")
  + std::string("        <Address>0xD0000000</Address>\n")
  + std::string("        <Length>4</Length>\n")
  + std::string("        <AccessMode>RW</AccessMode>\n")
  + std::string("        <pPort>TLPort</pPort>\n")
  + std::string("        <Sign>Unsigned</Sign>\n")
  + std::string("        <Endianess>LittleEndian</Endianess>\n")
  + std::string("    </IntReg>\n")
  + std::string("\n")
  + std::string("    <StringReg Name=\"InterfaceID\" NameSpace=\"Standard\">\n")
  + std::string("        <Address>0xC0000000</Address>\n")
  + std::string("        <Length>128</Length>\n")
  + std::string("        <AccessMode>RO</AccessMode>\n")
  + std::string("        <pPort>TLPort</pPort>\n")
  + std::string("    </StringReg>\n")
  + std::string("\n")
  + std::string("    <Port Name=\"TLPort\" NameSpace=\"Standard\">\n")
  + std::string("    </Port>\n")
  + std::string("</RegisterDescription>\n")
  + std::string("\n")
)},


};
}
